{"version":3,"sources":["../src/index.ts","../src/middleware.ts","../src/lib/auth.ts","../src/lib/compare.ts","../src/lib/credentials.ts"],"sourcesContent":["export {\n  createApiPage,\n  createNextAuthMiddleware,\n  nextBasicAuthMiddleware,\n} from './middleware'\nexport type { MiddlewareOptions } from './types'\n","import { NextApiRequest, NextApiResponse } from 'next'\nimport type { NextRequest } from 'next/server'\nimport { NextResponse } from 'next/server'\nimport { basicAuthentication } from './lib/auth'\nimport {\n  AuthCredentials,\n  compareCredentials,\n  parseCredentials,\n} from './lib/credentials'\nimport { MiddlewareOptions } from './types'\n\n/**\n * Creates a default Next middleware function that returns `NextResponse.next()` if the basic auth passes\n * @param req Next middleware request\n * @param options Options object based on MiddlewareOptions\n * @returns Either a 401 error or goes to the next page\n */\nexport const createNextAuthMiddleware =\n  ({ pathname = '/api/auth', users = [] }: MiddlewareOptions = {}) =>\n  (req: NextRequest) =>\n    nextBasicAuthMiddleware({ pathname, users }, req)\n\nexport const nextBasicAuthMiddleware = (\n  { pathname = '/api/auth', users = [] }: MiddlewareOptions = {},\n  req: NextRequest\n) => {\n  // Check if credentials are set up\n  const environmentCredentials = process.env.BASIC_AUTH_CREDENTIALS || ''\n  if (environmentCredentials.length === 0 && users.length === 0) {\n    // No credentials set up, continue rendering the page as normal\n    return NextResponse.next()\n  }\n\n  const credentialsObject: AuthCredentials =\n    environmentCredentials.length > 0\n      ? parseCredentials(environmentCredentials)\n      : users\n\n  const authHeader = req.headers.get('authorization')\n\n  if (authHeader) {\n    const currentUser = basicAuthentication(authHeader)\n\n    if (currentUser && compareCredentials(currentUser, credentialsObject)) {\n      return NextResponse.next()\n    }\n  }\n  const url = req.nextUrl\n\n  url.pathname = pathname\n\n  return NextResponse.rewrite(url)\n}\n\n/**\n * Create an API page that handles returning a 401 authentication failed message\n * @param realm The protection space\n * @param message Message you want to show to the users\n * @returns Next API page\n */\nexport const createApiPage =\n  (realm = 'protected', message = 'Authentication failed') =>\n  (_: NextApiRequest, res: NextApiResponse) => {\n    res.setHeader('WWW-Authenticate', `Basic realm=\"${realm}\"`)\n    res.statusCode = 401\n    res.end(message)\n  }\n","export type BasicAuthResult = {\n  user: string\n  pass: string\n}\n\nexport function basicAuthentication(\n  authorization?: string\n): BasicAuthResult | undefined {\n  if (!authorization) {\n    return undefined\n  }\n\n  const [scheme, encoded] = authorization.split(' ')\n\n  // The Authorization header must start with Basic, followed by a space.\n  if (!encoded || scheme !== 'Basic') {\n    throw new BadRequestException('Malformed authorization header.')\n  }\n\n  // Decodes the base64 value and performs unicode normalization.\n  // @see https://datatracker.ietf.org/doc/html/rfc7613#section-3.3.2 (and #section-4.2.2)\n  // @see https://dev.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\n  const buffer = Uint8Array.from(atob(encoded), character =>\n    character.charCodeAt(0)\n  )\n  const decoded = new TextDecoder().decode(buffer).normalize()\n\n  // The username & password are split by the first colon.\n  //=> example: \"username:password\"\n  const index = decoded.indexOf(':')\n\n  // The user & password are split by the first colon and MUST NOT contain control characters.\n  // @see https://tools.ietf.org/html/rfc5234#appendix-B.1 (=> \"CTL = %x00-1F / %x7F\")\n  // eslint-disable-next-line no-control-regex\n  if (index === -1 || /[\\0-\\x1F\\x7F]/.test(decoded)) {\n    throw new BadRequestException('Invalid authorization value.')\n  }\n\n  return {\n    user: decoded.substring(0, index),\n    pass: decoded.substring(index + 1),\n  }\n}\n\nclass BadRequestException extends Error {\n  status: number\n  statusText: string\n  reason: string\n  constructor(reason: string) {\n    super(reason)\n    this.status = 400\n    this.statusText = 'Bad Request'\n    this.reason = reason\n  }\n}\n","/**\n * Constant time string comparison.\n * Typescript version of [Bruce17's safe-compare](https://github.com/Bruce17/safe-compare)\n * @returns Boolean that confirms whether the string is the same\n */\nexport const safeCompare = (a: string, b: string) => {\n  const stringA = String(a)\n  const lengthA = stringA.length\n  let stringB = String(b)\n  let result = 0\n\n  if (lengthA !== stringB.length) {\n    stringB = stringA\n    result = 1\n  }\n\n  for (let i = 0; i < lengthA; i++) {\n    result |= stringA.charCodeAt(i) ^ stringB.charCodeAt(i)\n  }\n\n  return result === 0\n}\n","import { BasicAuthResult } from './auth'\nimport { safeCompare } from './compare'\n\n// This contains all the logic for parsing and checking credentials\ntype AuthCredentialsObject = {\n  name: string\n  password: string\n}\n\nexport type AuthCredentials = AuthCredentialsObject[]\n\nexport const parseCredentials = (credentials: string): AuthCredentials => {\n  const authCredentials: AuthCredentials = []\n\n  credentials.split('|').forEach(item => {\n    if (item.length < 3) {\n      throw new Error(\n        `Received incorrect basic auth syntax, use <username>:<password>, received ${item}`\n      )\n    }\n    const parsedCredentials = item.split(':')\n    if (\n      parsedCredentials[0].length === 0 ||\n      parsedCredentials[1].length === 0\n    ) {\n      throw new Error(\n        `Received incorrect basic auth syntax, use <username>:<password>, received ${item}`\n      )\n    }\n\n    authCredentials.push({\n      name: parsedCredentials[0],\n      password: parsedCredentials[1],\n    })\n  })\n\n  return authCredentials\n}\n\n/**\n * Compares the basic auth credentials with the configured user and password\n * @param credentials Basic Auth credentials object from `basic-auth`\n */\nexport const compareCredentials = (\n  input: BasicAuthResult,\n  requiredCredentials: AuthCredentials\n): boolean =>\n  requiredCredentials.some(\n    item =>\n      safeCompare(input.user, item.name) &&\n      safeCompare(input.pass, item.password)\n  )\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACEA,oBAA6B;;;ACGtB,SAAS,oBACd,eAC6B;AAC7B,MAAI,CAAC,eAAe;AAClB,WAAO;AAAA,EACT;AAEA,QAAM,CAAC,QAAQ,OAAO,IAAI,cAAc,MAAM,GAAG;AAGjD,MAAI,CAAC,WAAW,WAAW,SAAS;AAClC,UAAM,IAAI,oBAAoB,iCAAiC;AAAA,EACjE;AAKA,QAAM,SAAS,WAAW;AAAA,IAAK,KAAK,OAAO;AAAA,IAAG,eAC5C,UAAU,WAAW,CAAC;AAAA,EACxB;AACA,QAAM,UAAU,IAAI,YAAY,EAAE,OAAO,MAAM,EAAE,UAAU;AAI3D,QAAM,QAAQ,QAAQ,QAAQ,GAAG;AAKjC,MAAI,UAAU,MAAM,gBAAgB,KAAK,OAAO,GAAG;AACjD,UAAM,IAAI,oBAAoB,8BAA8B;AAAA,EAC9D;AAEA,SAAO;AAAA,IACL,MAAM,QAAQ,UAAU,GAAG,KAAK;AAAA,IAChC,MAAM,QAAQ,UAAU,QAAQ,CAAC;AAAA,EACnC;AACF;AAEA,IAAM,sBAAN,cAAkC,MAAM;AAAA,EACtC;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAY,QAAgB;AAC1B,UAAM,MAAM;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;AAClB,SAAK,SAAS;AAAA,EAChB;AACF;;;ACjDO,IAAM,cAAc,CAAC,GAAW,MAAc;AACnD,QAAM,UAAU,OAAO,CAAC;AACxB,QAAM,UAAU,QAAQ;AACxB,MAAI,UAAU,OAAO,CAAC;AACtB,MAAI,SAAS;AAEb,MAAI,YAAY,QAAQ,QAAQ;AAC9B,cAAU;AACV,aAAS;AAAA,EACX;AAEA,WAAS,IAAI,GAAG,IAAI,SAAS,KAAK;AAChC,cAAU,QAAQ,WAAW,CAAC,IAAI,QAAQ,WAAW,CAAC;AAAA,EACxD;AAEA,SAAO,WAAW;AACpB;;;ACVO,IAAM,mBAAmB,CAAC,gBAAyC;AACxE,QAAM,kBAAmC,CAAC;AAE1C,cAAY,MAAM,GAAG,EAAE,QAAQ,UAAQ;AACrC,QAAI,KAAK,SAAS,GAAG;AACnB,YAAM,IAAI;AAAA,QACR,6EAA6E;AAAA,MAC/E;AAAA,IACF;AACA,UAAM,oBAAoB,KAAK,MAAM,GAAG;AACxC,QACE,kBAAkB,GAAG,WAAW,KAChC,kBAAkB,GAAG,WAAW,GAChC;AACA,YAAM,IAAI;AAAA,QACR,6EAA6E;AAAA,MAC/E;AAAA,IACF;AAEA,oBAAgB,KAAK;AAAA,MACnB,MAAM,kBAAkB;AAAA,MACxB,UAAU,kBAAkB;AAAA,IAC9B,CAAC;AAAA,EACH,CAAC;AAED,SAAO;AACT;AAMO,IAAM,qBAAqB,CAChC,OACA,wBAEA,oBAAoB;AAAA,EAClB,UACE,YAAY,MAAM,MAAM,KAAK,IAAI,KACjC,YAAY,MAAM,MAAM,KAAK,QAAQ;AACzC;;;AHlCK,IAAM,2BACX,CAAC,EAAE,WAAW,aAAa,QAAQ,CAAC,EAAE,IAAuB,CAAC,MAC9D,CAAC,QACC,wBAAwB,EAAE,UAAU,MAAM,GAAG,GAAG;AAE7C,IAAM,0BAA0B,CACrC,EAAE,WAAW,aAAa,QAAQ,CAAC,EAAE,IAAuB,CAAC,GAC7D,QACG;AAEH,QAAM,yBAAyB,QAAQ,IAAI,0BAA0B;AACrE,MAAI,uBAAuB,WAAW,KAAK,MAAM,WAAW,GAAG;AAE7D,WAAO,2BAAa,KAAK;AAAA,EAC3B;AAEA,QAAM,oBACJ,uBAAuB,SAAS,IAC5B,iBAAiB,sBAAsB,IACvC;AAEN,QAAM,aAAa,IAAI,QAAQ,IAAI,eAAe;AAElD,MAAI,YAAY;AACd,UAAM,cAAc,oBAAoB,UAAU;AAElD,QAAI,eAAe,mBAAmB,aAAa,iBAAiB,GAAG;AACrE,aAAO,2BAAa,KAAK;AAAA,IAC3B;AAAA,EACF;AACA,QAAM,MAAM,IAAI;AAEhB,MAAI,WAAW;AAEf,SAAO,2BAAa,QAAQ,GAAG;AACjC;AAQO,IAAM,gBACX,CAAC,QAAQ,aAAa,UAAU,4BAChC,CAAC,GAAmB,QAAyB;AAC3C,MAAI,UAAU,oBAAoB,gBAAgB,QAAQ;AAC1D,MAAI,aAAa;AACjB,MAAI,IAAI,OAAO;AACjB;","names":[]}